package main

import (
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
)

type User struct {
	ID         uint   `gorm:"primaryKey" json:"id"` //adding the gorm primary id here since it is generated by gorm
	Name       string `json:"name"`
	Email      string `json:"email"`
	Phone      string `json:"phone"`
	Age        int    `json:"age"`
	Gender     string `json:"gender"`
	Language   string `json:"language"`
	Address    string `json:"address"`
	Occupation string `json:"occupation"`
	CreatedAt  time.Time
	UpdatedAt  time.Time
}


func registerUser(c* gin.Context){
	var newUser User
	if err := c.BindJSON(&newUser); err != nil {
		c.IndentedJSON(http.StatusBadRequest, gin.H{"message" : "Error binding json"})
		return
	}

	if err := saveUser(&newUser) ; err != nil {
		c.IndentedJSON(http.StatusInternalServerError, gin.H{"message": "Could not save the user"})
	    return
	}

	c.IndentedJSON(http.StatusCreated, gin.H{
		"message" : "User Created Successfully",
		"UserId" : newUser.ID,                   //gorm has automatically filled this field
	})
}

func getUsers(c* gin.Context){       // for debugging purposes

	var users []User
	users, err := loadUsers()
    if err != nil {
		c.IndentedJSON(http.StatusInternalServerError, gin.H{"Message": "Could not read the file"})
		return
	}

	if len(users) == 0 {
		c.IndentedJSON(http.StatusOK, gin.H{
			"message": "No Users Registered",
		})
		return
	}

     c.IndentedJSON(http.StatusAccepted, &users)
}



